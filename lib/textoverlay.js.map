{"version":3,"sources":["../src/textoverlay.js"],"names":["css","wrapper","overflow","overlay","color","position","width","textarea","background","outline","height","margin","properties","Textoverlay","parentElement","document","createElement","className","insertBefore","removeChild","appendChild","strategies","Error","origStyle","Object","keys","createWrapper","createOverlay","handleInput","bind","handleScroll","handleResize","addEventListener","observer","MutationObserver","observe","attributes","attributeFilter","wrapperDisplay","render","removeEventListener","disconnect","remove","skipUpdate","update","sync","firstChild","computeOverlayNodes","forEach","node","top","scrollTop","props","reduce","ns","strategy","highlight","map","Text","text","textContent","resp","prevIndex","match","lastIndex","exec","push","substr","str","length","span","cloneNode","value"],"mappings":"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","file":"textoverlay.js","sourcesContent":["/**\n * textoverlay.js - Simple decorator for textarea elements\n *\n * @author Yuku Takahashi <taka84u9@gmil.com>\n * @flow\n */\n\nimport flatten from \"./utils/flatten\";\nimport setStyle from \"./utils/setStyle\";\nimport getStyle from \"./utils/getStyle\";\n\nconst css = {\n  wrapper: {\n    \"box-sizing\": \"border-box\",\n    overflow: \"hidden\",\n  },\n  overlay: {\n    \"box-sizing\": \"border-box\",\n    \"border-color\": \"transparent\",\n    \"border-style\": \"solid\",\n    color: \"transparent\",\n    position: \"absolute\",\n    \"white-space\": \"pre-wrap\",\n    \"word-wrap\": \"break-word\",\n    overflow: \"hidden\",\n    width: \"100%\",\n  },\n  textarea: {\n    background: \"transparent\",\n    \"box-sizing\": \"border-box\",\n    outline: \"none\",\n    position: \"relative\",\n    height: \"100%\",\n    width: \"100%\",\n    margin: \"0px\",\n  },\n};\n\nconst properties = {\n  wrapper: [\n    \"background\",\n    \"display\",\n    \"margin\",\n  ],\n  overlay: [\n    \"font-family\",\n    \"font-size\",\n    \"font-weight\",\n    \"line-height\",\n    \"padding\",\n    \"border-width\",\n  ],\n};\n\nexport type Strategy = {\n  match: RegExp;\n  css: { [string]: string };\n};\n\nexport default class Textoverlay {\n  origStyle: { [string]: string };\n  strategies: Strategy[];\n  observer: MutationObserver;\n  wrapperDisplay: string;\n\n  overlay: HTMLDivElement;\n  textarea: HTMLTextAreaElement;\n  wrapper: HTMLDivElement;\n\n  handleInput: () => void;\n  handleResize: () => void;\n  handleScroll: () => void;\n\n  static createWrapper(textarea: HTMLTextAreaElement, parentElement: Element) {\n    const position = getStyle(textarea, [\"position\"]).position;\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"textoverlay-wrapper\";\n    setStyle(wrapper, Object.assign({}, getStyle(textarea, properties.wrapper), css.wrapper, {\n      position: position === \"static\" ? \"relative\" : position,\n    }));\n    parentElement.insertBefore(wrapper, textarea);\n    parentElement.removeChild(textarea);\n    wrapper.appendChild(textarea);\n    return wrapper;\n  }\n\n  static createOverlay(textarea: HTMLTextAreaElement, wrapper: HTMLDivElement) {\n    const overlay = document.createElement(\"div\");\n    overlay.className = \"textoverlay\";\n\n    setStyle(overlay, Object.assign({}, css.overlay, getStyle(textarea, properties.overlay)));\n    wrapper.insertBefore(overlay, textarea);\n    return overlay;\n  }\n\n  constructor(textarea: HTMLTextAreaElement, strategies: Strategy[]) {\n    const parentElement = textarea.parentElement;\n    if (!parentElement) {\n      throw new Error(\"textarea must in DOM tree\");\n    }\n\n    this.origStyle = getStyle(textarea, Object.keys(css.textarea));\n\n    this.wrapper = Textoverlay.createWrapper(textarea, parentElement);\n    this.overlay = Textoverlay.createOverlay(textarea, this.wrapper);\n\n    setStyle(textarea, css.textarea);\n    this.textarea = textarea;\n\n    this.strategies = strategies;\n\n    this.handleInput = this.handleInput.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.textarea.addEventListener(\"input\", this.handleInput);\n    this.textarea.addEventListener(\"scroll\", this.handleScroll);\n    this.observer = new MutationObserver(this.handleResize);\n    this.observer.observe(this.textarea, {\n      attributes: true,\n      attributeFilter: [\"style\"],\n    });\n\n    this.wrapperDisplay = getStyle(this.wrapper, [\"display\"])[\"display\"];\n    this.render();\n  }\n\n  destroy() {\n    this.textarea.removeEventListener(\"input\", this.handleInput);\n    this.textarea.removeEventListener(\"scroll\", this.handleScroll);\n    this.observer.disconnect();\n\n    setStyle(this.textarea, this.origStyle);\n\n    this.overlay.remove();\n    this.textarea.remove();\n    const parentElement = this.wrapper.parentElement;\n    if (parentElement) {\n      parentElement.insertBefore(this.textarea, this.wrapper);\n      this.wrapper.remove();\n    }\n  }\n\n  /**\n   * Public API to update and sync textoverlay\n   */\n  render(skipUpdate: boolean = false) {\n    if (!skipUpdate) {\n      this.update();\n    }\n    this.sync();\n  }\n\n  /**\n   * Update contents of textoverlay\n   *\n   * @private\n   */\n  update() {\n    // Remove all child nodes from overlay.\n    while (this.overlay.firstChild) {\n      this.overlay.removeChild(this.overlay.firstChild);\n    }\n\n    this.computeOverlayNodes().forEach(node => this.overlay.appendChild(node));\n  }\n\n  /**\n   * Sync scroll and size of textarea\n   *\n   * @private\n   */\n  sync() {\n    setStyle(this.overlay, { top: `${-this.textarea.scrollTop}px` });\n    const props = this.wrapperDisplay === \"block\" ? [\"height\"] : [\"height\", \"width\"];\n    setStyle(this.wrapper, getStyle(this.textarea, props));\n  }\n\n  /**\n   * @private\n   */\n  computeOverlayNodes(): Node[] {\n    return this.strategies.reduce((ns: Node[], strategy) => {\n      const highlight = document.createElement(\"span\");\n      setStyle(highlight, strategy.css);\n      return flatten(ns.map(node => {\n        if (!(node instanceof Text)) { return node; }\n        const text = node.textContent;\n        const resp = [];\n        for (let prevIndex = strategy.match.lastIndex = 0;; prevIndex = strategy.match.lastIndex) {\n          const match = strategy.match.exec(text);\n          if (!match) {\n            resp.push(new Text(text.substr(prevIndex)));\n            break;\n          }\n          const str = match[0];\n          resp.push(new Text(text.substr(prevIndex, strategy.match.lastIndex - prevIndex - str.length)));\n          const span = highlight.cloneNode();\n          span.textContent = str;\n          resp.push(span);\n        }\n        return resp;\n      }));\n    }, [new Text(this.textarea.value)]);\n  }\n\n  handleInput() {\n    this.render(); \n  }\n\n  handleScroll() {\n    this.render(true); \n  }\n\n  handleResize() {\n    this.render(true); \n  }\n}\n"]}